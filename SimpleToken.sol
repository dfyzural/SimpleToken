
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract SimpleToken {

    struct Token {
        string name;    
        uint param1;
        uint param2;
        uint price;
    }

    Token[] tokenArr;
    mapping (uint => uint) tokenToOwner;

    modifier checkOwnerAndAccept(uint tokenId) {
        require(msg.pubkey() == tokenToOwner[tokenId],101);
		tvm.accept();
		_;
	}

    function createToken(string name, uint param1, uint param2) public {
        tvm.accept();
        bool exist = false;
        for(uint i=0; i < tokenArr.length; i++){
            if(name == tokenArr[i].name){
                    exist = true;
                }
        }
        require(exist==false, 103, "Name already in use!");

        tokenArr.push(Token(name,param1,param2,0));
        uint keyAsLastNum = tokenArr.length - 1;
        tokenToOwner[keyAsLastNum] = msg.pubkey();
    }

    function getTokenOwner(uint tokenId) public view returns(uint){
            return tokenToOwner[tokenId];
    }

    function changeParam1(uint tokenId, uint param)public checkOwnerAndAccept(tokenId){
       tokenArr[tokenId].param1=param; 
    }

    function changeParam2(uint tokenId, uint param)public checkOwnerAndAccept(tokenId){
       tokenArr[tokenId].param2=param; 
    }

    function getTokenInfo(uint tokenId) public view returns (string tokenName, uint param1, uint param2){
        tokenName = tokenArr[tokenId].name;
        param1 = tokenArr[tokenId].param1;
        param2 = tokenArr[tokenId].param2;
    }

    function changeOwner(uint tokenId, uint pubKeyOfNewOwner) public checkOwnerAndAccept(tokenId){
        tokenToOwner[tokenId] = pubKeyOfNewOwner;
    }
    
    // Если цена равна 0, токен не продается.
    function sellToken(uint tokenId, uint price) public checkOwnerAndAccept(tokenId){
        tokenArr[tokenId].price=price;        
    }

    function dontSellToken(uint tokenId, uint price) public checkOwnerAndAccept(tokenId){
        tokenArr[tokenId].price=0;        
    }


    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();


    }


}
